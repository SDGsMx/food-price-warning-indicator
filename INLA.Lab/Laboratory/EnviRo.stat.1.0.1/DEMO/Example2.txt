

#######################################################################################
# This example illiustrates how the Sampson-Guttorp method (Sampson & Guttorp, 1992)  #
# is used to nonparametrically interpolate the covariance field. More details can be  #
# seen in Le & Zidek (2006, Chapter 6).                                               #
#                                                                                     #
# References:                                                                         #
# Sampson P & Guttorp P. Nonparametric estimation of nonstationary spatial structure. #
# J Amer stat Assoc, 1992 (87):108--119.                                              #
#                                                                                     #
# Le ND and Zidek JV. "Statistical analysis of environmental space-time processes",   #
# 2006 Springer NY.                                                                   #
#######################################################################################



####################################################################
# Start R
# Dynamically linking the dll files and installing the R functions

dyn.load("C:/EnviRo.stat.1.0/SG-method/SG.dll")
source("C:/EnviRo.stat.1.0/SG-method/SG.1.0.r")


###############################################################
#
# Demonstration - SG method (7 stations in Southern Ontario)
################################################################

# Read in locations and corresponding estimated covariance matrix

crds7 = matrix(scan("C:/EnviRo.stat.1.0/DEMO/data/crds7.txt"),byrow=T,ncol=2)
cov7 = matrix(scan("C:/EnviRo.stat.1.0/DEMO/data/cov7.txt"),byrow=T,ncol=7)
rownames(crds7) = c("Windsor","London","Toronto","Stouffville","Dorset", "Ottawa","Sudbury")


crds7

cov7

# Plotting the locations

X11()
plot(-crds7[,2],crds7[,1],xlab="Longitude", ylab="Latitude",ylim=c(42,47),
  xlim=c(-85,-75), main="Locations of Stations",type="n")
text(-crds7[,2],crds7[,1], c(1:7))
text(-crds7[,2],crds7[,1]+.15, row.names(crds7))


# Project the locations to a rectangle coordinate system using the
# Lambert projection. 
# Note the same projection will be used for the new locations later.


crd7.proj = Flamb2(crds7)
crd7.proj

# Calculate the inter-distances with the projected coordinates.
# It is helpful for the matrix calculations involved in
# the bending energy of the SG if the coordinate matrix is scaled
# so as not to have too great a range of values. Here it is divided by 10

crd7.lamb = crd7.proj$xy/10
dist = Fdist(crd7.lamb)

crd7.lamb
dist

# Start with the correlation matrix - Variance field will be examined later

cor7 = cov7 / sqrt( matrix(diag(cov7),7,7)*t(matrix(diag(cov7),7,7)) )

par(mfrow=c(1,1))
plot(-.2,0,xlim=c(0,70),ylim=c(-.2,1),xlab="Dist",ylab="Spatial correlation",type="n")
for (i in 1:6) for (j in (i+1):7) points(dist[i,j],cor7[i,j])

# Plot the dispersion 

disp = 2-2*cor7
plot(-.2,0,xlim=c(0,70),ylim=c(0,2),xlab="Dist",ylab="Dispersion",type="n")
for (i in 1:6) for (j in (i+1):7) points(dist[i,j],disp[i,j])

# Add a fitted exponential variogram using the 'Fvariogfit3' function (in SG package)
# with model=1 for Exponential (default) and = 2 for Gaussian
# Exponential variogram: a[1]+ (2-a[1])*(1-exp(-t0 *h))
# Gaussian variogram: a[1]+ (2-a[1])*(1-exp(-t0 *h^2))

h.lt = dist[row(dist) < col(dist)]
disp.lt = disp[row(disp) < col(disp)]	
variogfit <- Fvariogfit3(disp.lt, h.lt)

variogfit

# Add the variogram fit to the plot
x = seq(min(h.lt),max(h.lt),1)
a0 = variogfit$a[1]
t0 = variogfit$t0
lines(x, a0+(2-a0)*(1-exp(- (t0* x))))

# Not a very good fit! Save the plot for comparison later.


########################################################
# Use SG method to extend the spatial covariance to new locations
# Need several steps
# Open new graphics window 
#########################################################

# Step 1: Finding the new configuration (in D-space) 
X11()
sg.est = Falternate3(disp,crd7.lamb, lambda = 0,alter.lim=150, max.iter=50)

sg.est

# Step 2: Selecting a smoothing parameter 
#         First create a coordinate grid for look at the mapping transformation
apply(crd7.lamb, 2, range)
#coords.grid = Fmgrid(range(crd7.lamb[,1]), range(crd7.lamb[,2]))
coords.grid = Fmgrid(c(-32,30), range(crd7.lamb[,2]))
par(mfrow=c(1,2))
junk = setplot(crd7.lamb, ax=T)
deform  = Ftransdraw(disp=disp, Gcrds=crd7.lamb,MDScrds=sg.est$ncoords,
                       gridstr=coords.grid)


# Comment: lambda =4 seems reasonable 
# Look at the improvement in comparison with the original fit in other window

# Step 3 - Combining to get an optimal thin-plate spline mapping - Tspline
Tspline = sinterp( crd7.lamb, sg.est$ncoords, lam = 4 )

# Here are the alpha's and beta's
Tspline$sol

# Plotting to see the contraction and extension of the G-space
par(mfrow=c(1,1))
Tgrid  = bgrid(start=c(0,0), xmat=crd7.lamb , coef=Tspline$sol)
tempplot = setplot(crd7.lamb, ax=T)
text(crd7.lamb,labels = c(1:dim(crd7.lamb)[1]))
draw(Tgrid, fs=T)


# Step 4- Estimating the dispersion between new locations and the stations
#         Using the SG fit from steps 1-3 above

#         Here new locations are created using a grid of 100 points between the stations

lat10 = seq(min(crds7[,1]),max(crds7[,1]),length=10)
long10 = seq(max(crds7[,2]),min(crds7[,2]),length=10)
llgrid =  cbind(rep(lat10,10),c(outer(rep(1,10),long10)))


lat10
long10
llgrid[1:12,]

#  In  llgrid' the locations are ordered as (lat1,long1),(lat2,long1), ...,
#                    (latn,long1),(latn,long1), ...
#  The order is relevant for the contour map later!

plot(-llgrid[,2],llgrid[,1], xlab="Longitude", ylab="Latitude", ylim=c(42,47),
  xlim=c(-84,-75), main="New locations on a grid")
text(-crds7[,2],crds7[,1], row.names(crds7))


# Project the new locations using the same Lambert project for stations above
# Note the same scale factor of 10 is used to reduce inter-distances as before
z = crd7.proj
newcrds.lamb = Flamb2(llgrid,latrf1=z$latrf1, latrf2=z$latrf2, 
                    latref=z$latref, lngref=z$lngref)$xy/10

#  Combine the new locations and stations together begining with new locations
allcrds = rbind(newcrds.lamb,crd7.lamb)


# Using the 'corrfit' function to obtain correlations between the stations
# allcrds: locations in G-space
# Tspline: SG mapping to D-space
# sg.est : The estimated parameters of the varigoram
# model = 1: specify the exponential variogram

corr.est = corrfit(allcrds, Tspline, sg.est, model = 1)
dim(corr.est$cor)

# Step 5: Interpolating the variance field 
#         
      diag(cov7)
# Non-homogeneous and interpolating using the same thin-plate spline
Tspline.var = sinterp(allcrds[101:107,],matrix(diag(cov7),ncol=1),lam=4)

varfit = seval(allcrds,Tspline.var)$y
temp = matrix(varfit,length(varfit),length(varfit))

# Combine to get the covariance matrix for all stations
covfit = corr.est$cor * sqrt(temp * t(temp))

dim(covfit)



# That completes the SG-method for extending the covariance matrix to ungauged sites
# stored in covfit

# Plot contours of the SG interpolated variance field


plot(-crds7[,2],crds7[,1], xlab="Longitude", ylab="Latitude", ylim=c(42,47), 
  xlim=c(-84,-75), type="n", main="Contours of interpolated variance")
text(-crds7[,2],crds7[,1], row.names(crds7))
uu = covfit[1:100,1:100]
ug = covfit[1:100,101:107]
gg = covfit[101:107,101:107]
u.g = uu - ug %*% solve(gg) %*% t(ug)
vv = matrix(diag(u.g),byrow=T, ncol=10)
contour(-long10,lat10, vv, xlab="Long", ylab="Lat", add=T)


# One useful diagnostic tool for linking specific stations with observed dispersions 
Disp.link(disp,cbind(-crds7[,2],crds7[,1]))


