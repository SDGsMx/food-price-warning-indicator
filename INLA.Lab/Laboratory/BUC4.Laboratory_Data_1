#
#
#	Date: 4 June 2016
#
#	R version: 3.2.2
#

rm(list=ls())

# install.packages("INLA", repos="https://www.math.ntnu.no/inla/R/stable")
# install.packages('sp')
# install.packages('spatstat')
# install.packages('mvtnorm')
# install.packages('lattice')
# install.packages('mgcv')
# install.packages('pixmap')
# install.packages('numDeriv')
# install.packages('fields')

wpath <- 'C:/JCMO.Trabajo/Seminars,Visits&Talks/16-06.BUC4/Laboratory/'

library('sp')
library('INLA')
library('spatstat')
library('mvtnorm')
library('lattice')
library('mgcv')
library('pixmap')
library('numDeriv')
library('fields')

source(paste(wpath,'Data_1/functions.r',sep=''))

# 2. A simple point process

# Reading in and gridding the data
# We read in the data as:
paul <- read.delim(paste(wpath,'Data_1/paul.txt',sep=''))

# type 5 is Andersonia heterophylla
data <- paul[paul$type=="5",]
x <- data$x/10
y <- data$y/10

# We transform the data into a point pattern object (using several commands from the library
# spatstat, for details check the library help files). Ignore the warning about duplicated
# points.
x.area <- 22
x.win <- owin(c(0, x.area),c(0, x.area))

data.pp=ppp(x,y,window=x.win)
plot(data.pp, main= " Andersonia heterophylla")

# We now need to transform the data, i.e. construct a grid with 30 x 30 cells
nrow <- 30
ncol <- nrow
x.grid <- quadrats(x.win,ncol,nrow)

# and count the number of points in each grid cell; note that this will be our response variable.
count.grid <- quadratcount(data.pp, tess=x.grid)
plot(count.grid)

# (b) Running a first model
# We have to transform the grid of counts into a vector (and we now use the notation from the
# slides for the response variable):
Y <- as.vector(count.grid)

# The number of grid cells
n <- ncol*nrow

# And calculate the area of the grid cells:
cell.area <- x.area^2/n
E <- rep(cell.area, n)
# INLA requires separate indices for each of the spatial vector and the error term.
I <- 1:n
J <- 1:n

# We have to specify a prior for the spatial vector
prior.spat <- c(1,0.00005) #Default!
hyper.spat <- list(prec=list(param=prior.spat))

# We can no specify the model formula
formula <- Y ~ 1+ 
				f(I, model="rw2d", nrow=nrow, ncol=ncol, hyper=hyper.spat)+
				f(J, model="iid")

# and run the model (this should take only a few seconds at most)
result <- inla(	formula,data=data.frame(Y,I,J),
				family="poisson",E=E, verbose=TRUE,
				control.compute=list(dic=TRUE))

# We can look at a summary and a plot of the results
summary(result)
plot(result)

# The estimated intercept
result$summary.fixed

# the (posterior mean of the) spatial eect
f.spat <- result$summary.random$I$mean

# plot it
im.matrix(matrix(f.spat, ncol, nrow))

# the error term
f.unstruct <- result$summary.random$J$mean
im.matrix(matrix(f.unstruct, nrow, ncol))

# the resulting fit (compare with original pattern) scaled up by the area.
fit <- E*result$summary.fitted.values$mean
im.matrix(matrix(fit, nrow, ncol))

#
# -- END: BUC4.Laboratory.R --